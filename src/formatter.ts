import { DataFrame, PanelModel } from '@grafana/data';

/**
 * Represents a single-dimensional data point in time.
 */
type DataPoint = { [index: string]: number };

/**
 * The data structure for formatted time-series data.
 */
type FormattedData = { [index: number]: DataPoint };

/**
 * Format and clean up the panel data.
 * All series are expected to be time
 * series and have unique field names.
 * @param series The data object generated by the panel.
 * @returns A formatted object of panel data.
 * `{ timestamp : { field : value, ... }, ... }`
 */
export function format(series: DataFrame[]): FormattedData {
  const formatted: FormattedData = {};
  series.forEach((frame) => {
    frame.fields
      .find((field) => field.type === 'time')
      ?.values.forEach((t: number, i: number) => {
        frame.fields
          .filter((field) => field.type === 'number')
          .forEach((field) => {
            const name: string = field.config.displayNameFromDS || field.config.displayName || field.name;
            formatted[t] = formatted[t] || {};
            formatted[t][name] = field.values[i];
          });
      });
  });
  return formatted;
}

/**
 * Generate a list of unique field names from formatted data.
 * @param data The formatted data returned by `format(...)`
 * @returns A list of unique field names.
 */
export function getFieldList(data: FormattedData): string[] {
  let store: DataPoint = {};
  Object.values(data).forEach(point => store = { ...store, ...point });
  return Object.keys(store);
}

/**
 * Set empty options of `dirty` to defaults.
 * @param dirty Any object with similar keys to `T`
 * @param defaultObj The default options for `T`
 * @returns A cleaned-up object.
 */
export function clean<T>(dirty: Partial<T>, defaultObj: T): T {
  const cleaned: T = JSON.parse(JSON.stringify(defaultObj));
  for (const key in cleaned) {
    cleaned[key] = dirty[key] ?? defaultObj[key];
  }
  return cleaned;
}

/**
 * Migrate an older set of panel options to a current model.
 */
export function migrate(panel: PanelModel) {
  const options = Object.assign({}, panel.options);
  const version = panel.pluginVersion ?? '';
  if (version.startsWith('4.')) {
    // `flipXY` was changed to `mollier`
    if ('flipXY' in options) {
      options['mollier'] = options['flipXY'];
      delete options['flipXY'];
    }
    // `legend` was changed to `seriesName`
    for (const key in options['series']) {
      if ('legend' in options['series'][key]) {
        options['series'][key]['seriesName'] = options['series'][key]['legend'];
        delete options['series'][key]['legend'];
      }
    }
  }
  return options;
}
